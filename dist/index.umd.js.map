{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["const socketIO = require('socket.io-client');\nconst nanobus = require('nanobus')();\n\n/**\n * The error types that cause the {@link SocketEvents} 'error' event to fire.\n * @type {Object} SOCKET_ERROR\n * @property {string} GENERAL A general socket error.\n * @property {string} TIMEOUT The ping to the server timed out.\n * @property {string} NO_ATTEMPTS_LEFT The client ran out of attempts to reconnect to the server.\n * @property {string} AUTH_FAILED The client is not granted access to the server.\n * @since 1.0.0\n */\nexport const SOCKET_ERROR = {\n\tGENERAL: 'GENERAL',\n\tTIMEOUT: 'TIMEOUT',\n\tNO_ATTEMPTS_LEFT: 'NO_ATTEMPTS_LEFT',\n\tAUTH_FAILED: 'AUTH_FAILED'\n};\n\n/**\n * The disconnect reason that gets passed along with the {@link SocketEvents} 'disconnect' event.\n * @type {Object} DISCONNECT_REASON\n * @property {string} UNKNOWN An unknown disconnect reason.\n * @property {string} SERVER_DISCONNECT The server disconnected the client. A manual reconnect would be required.\n * @property {string} CLIENT_DISCONNECT The client disconnected from the server. A manual reconnect would be required.\n * @property {string} PING_TIMEOUT The ping to the server timed-out. The client will automatically try to reconnect.\n * @since 1.0.0\n */\nexport const DISCONNECT_REASON = {\n\tUNKNOWN: 'UNKNOWN',\n\tSERVER_DISCONNECT: 'SERVER_DISCONNECT',\n\tCLIENT_DISCONNECT: 'CLIENT_DISCONNECT',\n\tPING_TIMEOUT: 'PING_TIMEOUT'\n};\n\n/**\n * As ESDoc lacks a way to properly document events, this typedef shows all the different events the client might emit.\n * The \"type\" below is the callback argument for the listener.\n * @typedef SocketEvents\n * @property {void} connect Emitted on a successful connect to the server.\n * @property {DISCONNECT_REASON} disconnect Emitted when the client disconnected from the server. The disconnect reason indicates why.\n * @property {SOCKET_ERROR, object} error Emitted when the encounters an error. The first argument is the {@link SOCKET_ERROR} object, indicating what the error object might be.\n * @property {Number} reconnecting Emitted once the clients starts trying to reconnect to the server. Attempt number passed to the listener.\n *\n * @example\n * client.on('error', (errorType, errorData) => {});\n * client.on('disconnect', reason => {});\n * client.on('reconnecting', attempt => {});\n */\n\n/**\n * The mission control client class.\n *\n * You can easily build your own client implementation, this one is just easy to use and has everything you might need.\n * @since 1.0.0\n * @emits {connect} emit event when bar.\n */\nexport class MissionControlClient {\n\t/**\n\t * The MissionControlClient constructor.\n\t *\n\t * You can easily build your own client implementation, this one is just easy to use and has everything you might need.\n\t * @param {string} url - The mission control url the client should connect to.\n\t * @param {string} authToken - The JWT authentication token that should be used to authenticate.\n\t */\n\tconstructor(url, authToken) {\n\t\t/**\n\t\t * The socket.io socket used for the communication.\n\t\t *\n\t\t * While it is possible it is recommended not to use this variable directly and to use the exposed {@link MissionControlClient#action} and {@link MissionControlClient#subscribe} methods instead.\n\t\t *\n\t\t * @type socket.io-client~Socket\n\t\t * @since 1.0.0\n\t\t */\n\t\tthis.socket = socketIO(url, {\n\t\t\tquery: { token: authToken }\n\t\t});\n\n\t\t/**\n\t\t * The event bus used to communicate events within the client.\n\t\t *\n\t\t * While it is possible it is recommended not to use this variable directly and to use the exposed {@link MissionControlClient#on} and {@link MissionControlClient#subscribe} methods instead.\n\t\t *\n\t\t * @type socket.io-client~Nanobus\n\t\t * @emits {SocketEvent}\n\t\t * @since 1.0.0\n\t\t */\n\t\tthis.eventBus = nanobus();\n\n\t\t/** @type {Object<eventKey<string>, listenerCount<Number>>} */\n\t\tthis._subscriptions = {};\n\t\t/** @type {Array<eventKey<string>>} */\n\t\tthis._subscribeTo = [];\n\t\t/** @type {Array<eventKey<string>>} */\n\t\tthis._unsubscribeFrom = [];\n\n\t\tthis._setupSocketHandlers();\n\t}\n\n\t/**\n\t * This function sets up all the listeners for the socket (connect, disconnect, error, reconnect, etc).\n\t *\n\t * Job of this function is to unify all error events into a shape that makes more sense. See {@link SOCKET_ERROR} for the possible errors.\n\t */\n\t_setupSocketHandlers() {\n\t\t// On successful connection\n\t\tthis.socket.on('connect', () => {\n\t\t\tcleanSubscriptions();\n\n\t\t\tthis.eventBus.emit('connect');\n\t\t});\n\n\t\t// On disconnect from server, reason can either be server disconnect, client disconnect or ping timeout.\n\t\tthis.socket.on('disconnect', reason => {\n\t\t\tlet disconnectReason;\n\n\t\t\tswitch (reason) {\n\t\t\t\tcase 'io server disconnect':\n\t\t\t\t\tdisconnectReason = DISCONNECT_REASON.SERVER_DISCONNECT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'io client disconnect':\n\t\t\t\t\tdisconnectReason = DISCONNECT_REASON.CLIENT_DISCONNECT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ping timeout':\n\t\t\t\t\tdisconnectReason = DISCONNECT_REASON.CLIENT_DISCONNECT;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdisconnectReason = DISCONNECT_REASON.UNKNOWN;\n\t\t\t}\n\n\t\t\tthis.eventBus.emit('disconnect', disconnectReason);\n\t\t});\n\n\t\t/*\n\t\t * RECONNECTION\n\t\t */\n\t\t// On successful reconnect, attempt is the amount of attempts needed for the reconnect.\n\t\t// As of right now, not really needed for anything,\n\t\t// as the connect event fires on every successful connect, even reconnects.\n\t\t// this.socket.on('reconnect', attempt => {});\n\n\t\t// On reconnect attempt, attempt is the current attempt number\n\t\tthis.socket.on('reconnect_attempt', attempt => {\n\t\t\tthis.eventBus.emit('reconnecting', attempt);\n\t\t});\n\n\t\t/*\n\t\t * ERROR HANDLING\n\t\t */\n\t\t// On a general connection error, the error object is the error thrown\n\t\tthis.socket.on('connect_error', error => {\n\t\t\t// TODO: determine errorType\n\t\t\tthis.eventBus.emit('error', SOCKET_ERROR.GENERAL, error);\n\t\t});\n\n\t\t// On a ping/connection timeout error, the timeout object is IDK what\n\t\t// TODO: what is the timeout object?\n\t\tthis.socket.on('connect_timeout', timeout => {\n\t\t\tthis.eventBus.emit('error', SOCKET_ERROR.TIMEOUT, timeout);\n\t\t});\n\n\t\t// On reconnect error, dont know if needed for now\n\t\t// this.socket.on('reconnect_error', error => {});\n\n\t\t// On reconnection failed, fired becayse we run out of attempts\n\t\t// and not because there is an error in the connection\n\t\tthis.socket.on('reconnect_failed', () => {\n\t\t\tthis.eventBus.emit('error', SOCKET_ERROR.NO_ATTEMPTS_LEFT);\n\t\t});\n\t}\n\n\t/**\n\t * Listen to a socket event.\n\t *\n\t * Please note, if you want to subscribe to action or state events, please use the {@link subscribe} method.\n\t * The returned function can be used to unsubscribe from the event listener again.\n\t * This makes it possible to for example remove inline listeners.\n\t *\n\t * @param {string} event - The socket event you want to listen to.\n\t * @param {function(data: object)} listener - The listener function that will be called on event.\n\t * @return {function} Returns a function which you can use to remove the event listener.\n\t *\n\t * @since 1.0.0\n\t * @example\n\t * on('connect', () => {})\n\t * on('error', (errorType, errorObject) => {})\n\t */\n\ton(event, listener) {\n\t\tthis.eventBus.on(event, listener);\n\n\t\treturn () => this.eventBus.removeListener(event, listener);\n\t}\n\n\t/**\n\t * Listen to a socket event, and clear it after it's been called once.\n\t *\n\t * Please note, if you want to subscribe to action or state events, please use the {@link subscribe} method.\n\t * The returned function can be used to unsubscribe from the event listener again.\n\t * This makes it possible to for example remove inline listeners.\n\t *\n\t * @param {string} event - The socket event you want to listen to.\n\t * @param {function(data: object)} listener - The listener function that will be called on event once.\n\t * @return {function} Returns a function which you can use to remove the event listener.\n\t *\n\t * @since 1.0.0\n\t * @example\n\t * once('connect', (data) => {})\n\t */\n\tonce(event, listener) {\n\t\tthis.eventBus.once(event, listener);\n\n\t\treturn () => this.eventBus.removeListener(event, listener);\n\t}\n\n\t/**\n\t * Subscribe to a server event (actions, state updates).\n\t *\n\t * To subscribe to a server event, we need to emit a 'subscribe' event to the server so it knows\n\t * to broadcast the right events to us. This function automatically handles these 'subscribe' and\n\t * 'unsubscribe' events so you can simply use this method to do it. When we disconnect from\n\t * the server, this function also handles resubscribing to the events.\n\t * It returns a function that can you can use to remove the event listener again and unsubscribe from the server.\n\t *\n\t * @param {string} serverEvent - This is the server event you want to subscribe to. Keep in mind these are not general socket events, but rather state / action Mission Control events.\n\t * @param {function(data: object)} listener - The listener function that will be called on event.\n\t * @return {function} Returns a function which you can use to remove the event listener.\n\t *\n\t * @since 1.0.0\n\t * @example\n\t * client.subscribe('action:EXAMPLE:DO', (data) => {})\n\t * client.subscribe('update:stateObject', (data) => {});\n\t */\n\tsubscribe(serverEvent, listener) {\n\t\tthis.socket.on(serverEvent, listener);\n\n\t\tif (!(serverEvent in this.subscriptions)) {\n\t\t\tif (this.socket.connected) {\n\t\t\t\tthis.socket.emit('subscribe', {\n\t\t\t\t\tevent: serverEvent\n\t\t\t\t});\n\t\t\t\tthis.subscriptions[serverEvent] = 1;\n\t\t\t} else {\n\t\t\t\tthis.subscribeTo.push(serverEvent);\n\t\t\t}\n\t\t}\n\n\t\treturn () => {\n\t\t\tthis.socket.removeListener(serverEvent, listener);\n\n\t\t\tif (this.socket.connected) {\n\t\t\t\tthis.subscriptions[serverEvent]--;\n\n\t\t\t\tif (this.subscriptions[serverEvent] === 0) {\n\t\t\t\t\tdelete this.subscriptions[serverEvent];\n\n\t\t\t\t\tthis.socket.emit('unsubscribe', {\n\t\t\t\t\t\tevent: serverEvent\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.unsubscribeFrom.push(serverEvent);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Execute an action on the mission control server.\n\t *\n\t * This method sends an 'action' event, which the server will use to execute the action and modify\n\t * the state accordingly.\n\t *\n\t * @param {string} action - The action that you want to execute.\n\t * @param {object} data - The data you want to pass to the action function.\n\t *\n\t * @since 1.0.0\n\t * @example\n\t * client.action('EXAMPLE:DO', { parameter: 'example' })\n\t * client.action('VIDEO-QUEUE:PUSH', { video: { url: '...', format: 'mp4' }})\n\t */\n\taction(action, data) {\n\t\tthis.socket.emit('action', { action, data });\n\t}\n}\n"],"names":["const","socketIO","require","nanobus","SOCKET_ERROR","GENERAL","TIMEOUT","NO_ATTEMPTS_LEFT","AUTH_FAILED","DISCONNECT_REASON","UNKNOWN","SERVER_DISCONNECT","CLIENT_DISCONNECT","PING_TIMEOUT","MissionControlClient","constructor","url","authToken","socket","query","eventBus","_subscriptions","_subscribeTo","_unsubscribeFrom","_setupSocketHandlers","on","emit","reason","disconnectReason","attempt","error","timeout","event","listener","this","removeListener","once","subscribe","serverEvent","subscriptions","connected","subscribeTo","push","unsubscribeFrom","action","data"],"mappings":"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"}